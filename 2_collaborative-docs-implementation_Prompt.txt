
Step1:
Based on our collaborative document system architecture , I need to establish the development context for implementing the system.
Create a comprehensive system-context.md file that includes:
1. Architecture Overview
- Microservices: UserService, DocumentService, CollaborationService
- Communication: REST APIs + WebSocket for real-time
- Data: PostgreSQL + Redis for caching/messaging
- Tech Stack: FastAPI, SQLAlchemy, Redis, WebSockets
2. Development Standards
- Code structure and patterns to follow
- Error handling conventions
- API response formats
- Database model patterns
- Testing requirements
3. Integration Specifications
- Service communication protocols
- Authentication/authorization flow
- Data validation requirements
- Real-time message formats
4. Quality Requirements
- Performance expectations
- Security requirements
- Logging and monitoring standards
- Documentation requirements


Step2:
Generate a complete User Service for the collaborative document system using the system-context.md as reference.
Requirements:
- FastAPI application with async patterns
- User registration, login, profile management
- JWT token authentication with refresh tokens
- Password hashing with bcrypt
- Input validation with Pydantic
- PostgreSQL integration with SQLAlchemy
- Redis for session management
- Comprehensive error handling
- Health check endpoints
- OpenAPI documentation
- Security best practices (rate limiting, input sanitization)
Service Specifications:
- POST /auth/register - User registration
- POST /auth/login - User authentication
- GET /auth/me - Get current user profile
- PUT /auth/profile - Update user profile
- POST /auth/refresh - Refresh JWT token
- POST /auth/logout - User logout
- GET /health - Service health check
Include:
- Complete FastAPI app setup with middleware
- Database models with relationships
- Pydantic schemas for validation
- Authentication dependencies
- Error handling and logging
- Configuration management
- Sample data for testing
Generate production-ready code following the established patterns.

Step3:
Now add comprehensive security features and testing
1. Security Enhancements:
- Rate limiting for authentication endpoints
- Input validation with detailed error messages
- Security headers and CORS configuration
- Audit logging for security events
- Password complexity requirements
- Session management with Redis
- Account lockout after failed attempts
2. Testing Suite:
- Unit tests for all authentication functions
- Integration tests for API endpoints
- Security tests for common vulnerabilities
- Performance tests for concurrent users
3. Documentation:
- API documentation with examples
- Security implementation details
- Configuration guide
- Deployment instructions
*Generate all files needed for a complete, production-ready User Service.

---
Generate a complete Document Service following the system context and patterns established in the User Service.
Requirements:
- Document CRUD operations with version control
- Integration with User Service for authentication
- Document sharing and permissions management
- Full-text search capabilities
- File upload/download handling
- Document collaboration metadata
- PostgreSQL with optimized queries
- Redis caching for frequently accessed documents
Service Specifications:
- POST /documents - Create new document
- GET /documents - List user's documents with pagination
- GET /documents/{id} - Get specific document with content
- PUT /documents/{id} - Update document content with versioning
- DELETE /documents/{id} - Delete document
- POST /documents/{id}/share - Share document with users
- GET /documents/{id}/collaborators - Get document collaborators
- GET /documents/search - Full-text search across documents
Advanced Features:
- Document versioning with diff tracking
- Automated backup and recovery
- Document templates and cloning
- Export to multiple formats (PDF, DOCX, HTML)
- Collaborative permissions (read/write/admin)
- Document analytics and usage tracking
Include:
- Complete service implementation with all endpoints
- Database models for documents, versions, permissions
- Caching strategies for performance
- Integration with User Service for authentication
- Comprehensive error handling and validation
- Unit and integration tests
- API documentation
Generate production-ready code consistent with the User Service patterns.

-----------------
Generate the most complex service - the real-time Collaboration Service for handling simultaneous document editing.
Core Requirements:
- WebSocket connection management for real-time communication
- Operational Transformation algorithm for conflict resolution
- Real-time cursor position tracking
- Change broadcasting to all connected users
- Connection state management and recovery
- Integration with Document Service for persistence
Technical Specifications:
- WebSocket endpoints for real-time communication
- Operational transformation for text changes
- Redis Streams for event processing
- Message queuing for reliable delivery
- Connection pooling and load balancing
- Automatic reconnection handling
WebSocket Events:
- user_joined - User joins document editing session
- user_left - User leaves document editing session
- document_change - Text modification with operational transformation
- cursor_position - Real-time cursor tracking
- document_saved - Document persistence confirmation
Advanced Features:
- Conflict resolution with merge strategies
- Undo/redo in collaborative context
- Real-time user presence indicators
- Change attribution and author tracking
- Network failure recovery mechanisms
- Performance optimization for 1000+ concurrent users
Implementation Requirements:
- FastAPI with WebSocket support
- Operational transformation algorithm implementation
- Redis integration for event processing
- Connection management with automatic cleanup
- Comprehensive error handling and recovery
- Performance monitoring and metrics
- Unit tests for collaboration logic
- Integration tests with other services
Generate the complete service with WebSocket handlers, operational transformation logic, and integration with other services.
----------------------
Step 5: Integration and Testing Setup
10. Generate integration code:
Create the integration layer and testing setup for all three services:
1. Integration Components:
- Docker Compose configuration for all services
AI Driven Development #60day challenge
- Shared models and utilities
- API Gateway configuration for service routing
- Service discovery and health monitoring
- Database migration scripts
- Redis configuration for different environments
2. Testing Framework:
- Integration tests for service communication
- End-to-end tests for complete workflows
- Load testing scripts for WebSocket performance
- Security testing for authentication and authorization
3. Development Environment:
- Setup scripts for local development
- Environment configuration management
- Debugging and monitoring tools
- Comprehensive README with instructions
4. Documentation:
- API documentation for all services
- Architecture documentation with diagrams
- Deployment and operations guide
- Development workflow documentation
Generate complete setup for a production-ready microservices system.

---------------
Design and implement an intelligent API Gateway for our collaborative document system.
System Requirements:
- Route requests to User, Document services
- Centralized authentication and authorization
- Rate limiting per user and endpoint
- Request/response transformation
- Load balancing with health checks
- Comprehensive logging and monitoring
- Error handling and circuit breakers
- CORS configuration for web clients
Advanced Features:
- Intelligent routing based on request analysis
- Dynamic rate limiting based on user behavior
- Request caching for frequently accessed data
- Response compression and optimization
- API versioning support
- Real-time metrics and analytics
Technical Implementation:
- FastAPI with middleware for cross-cutting concerns
- Redis for rate limiting and caching
- Service discovery and health monitoring
- JWT token validation and refresh
- Request correlation IDs for tracing
- Structured logging for observability
Gateway Routes:
- /api/v1/auth/* → User Service
- /api/v1/documents/* → Document Service
- /api/v1/health → All services health check
- /api/v1/metrics → Gateway and service metrics
Include comprehensive error handling, security measures, and performance optimizations.

-------------------
can you make sure all the service are having proper port number and gateway. 
let me know do i need to run  docker or you will do it
--postgres-1               | 2025-06-29 09:09:56.943 UTC [2575] FATAL:  database "user" does not exist

yes please do everything to make this running
caching strategies:
"Optimize database performance with intelligent caching:
CDN and "Optimize content delivery with intelligent edge caching
AI Invalidation Logic: "Implement intelligent cache invalidation
Goal: Implement caching, optimize database performance, and add monitoring with AI guidance.
--------------------

Create a robust event-driven communication system for service integration.
Event System Requirements:
- Reliable message delivery between services
AI Driven Development #60day challenge
- Event ordering and deduplication
- Dead letter queues for failed processing
- Event replay for new consumers
- Schema validation for event payloads
- Monitoring and alerting for event processing
Event Types for Our System:
- UserEvents: user_registered, user_updated, user_deleted
- DocumentEvents: document_created, document_updated, document_shared, document_deleted
- CollaborationEvents: user_joined_session, user_left_session, document_changed
Technical Implementation:
- Redis Streams for event backbone
- Event schema validation with Pydantic
- Automatic retry with exponential backoff
- Consumer group management
- Event store for audit and replay
- Performance monitoring and metrics
Components to Generate:
1. EventPublisher: Publishes events to streams
2. EventConsumer: Base class for consuming events
3. EventRouter: Routes events to appropriate handlers
4. EventStore: Persistent storage for events
5. EventMonitor: Monitoring and alerting
Include comprehensive error handling, monitoring, and testing utilities.
Create comprehensive integration testing framework for service communication.
Testing Requirements:
- End-to-end workflow testing
- Service dependency testing
- Error handling and recovery testing
- Performance and load testing
- Event processing validation
Test Scenarios:
1. User Registration to Document Creation Flow
2. Document Sharing with Event Notification
3. Service Failure and Recovery Scenarios
4. API Gateway Routing and Authentication
5. Event Processing and Ordering
Testing Infrastructure:
- Test fixtures and cleanup
- Service mocking and stubbing
- Performance benchmarking
- Integration with pytest
Generate complete testing framework with utilities for setup, execution, and validation.

---------------------------

Module:
Design and implement a comprehensive caching system for our collaborative document platform.
Performance Requirements:
- Sub-50ms response times for cached data
AI Driven Development #60day challenge
- 90%+ cache hit rates for frequently accessed content
- Intelligent cache warming and invalidation
- Multi-layer caching strategy (Redis, in-memory, CDN)
- Performance monitoring and optimization
Caching Layers:
1. Application Cache (Redis):
- User sessions and authentication data
- Document metadata and permissions
- Collaboration session state
- Search results and aggregations
2. Database Query Cache:
- Expensive query results
- Computed aggregations
- Frequently accessed document content
3. CDN/Edge Cache:
- Static assets and public content
- Document snapshots for collaboration
- API responses for public endpoints
AI Driven Development #60day challenge
Advanced Features:
- Predictive cache warming based on user patterns
- Intelligent cache eviction with LRU and frequency analysis
- Cache dependency tracking for smart invalidation
- Performance analytics and optimization recommendations
- Distributed cache coherence across service instances
Technical Implementation:
- Redis Cluster for distributed caching
- Async cache operations with connection pooling
- Cache key namespacing and versioning
- Compression for large cached objects
- Monitoring and alerting for cache performance
Generate production-ready caching implementation with comprehensive error handling and monitoring.

-----------
Create comprehensive database performance optimization tools for our collaborative document system.
Database Performance Requirements:
- Sub-100ms query response times for 95% of requests
- Efficient handling of concurrent document edits
- Optimized search across large document collections
- Minimal database locking and contention
- Horizontal scaling capability
Optimization Areas:
1. Query Optimization:
- Automatic query analysis and optimization suggestions
- Index recommendation based on query patterns
- Query plan analysis and improvement
- Parameterized query optimization
2. Connection Management:
- Optimal connection pool sizing
- Connection lifecycle management
- Read/write splitting for scalability
- Connection health monitoring
3. Database Schema Optimization:
- Table partitioning strategies
- Index optimization for collaborative editing
- Denormalization for read performance
- Archive strategies for old data
4. Concurrency Optimization:
- Optimistic locking for document edits
- Deadlock detection and resolution
- Transaction isolation optimization
- Bulk operation optimization
Technical Implementation:
- PostgreSQL-specific optimizations
- Query performance monitoring
- Automatic index management
- Connection pool optimization
AI Driven Development #60day challenge
- Database health monitoring
Generate production-ready database optimization tools with monitoring and alerting.

--------
Implement AI-powered performance monitoring system for real-time optimization.
Monitoring Requirements:
- Real-time performance metrics collection
- Anomaly detection for performance degradation
- Predictive alerting for potential issues
- Performance trend analysis and optimization
- Business impact assessment of performance issues
Monitoring Categories:
1. Application Performance:
- API response times and throughput
- WebSocket connection performance
- Memory and CPU usage patterns
- Error rates and failure patterns
2. Database Performance:
- Query execution times and patterns
- Connection pool utilization
- Index usage and optimization opportunities
- Database lock contention
3. Infrastructure Performance:
- Server resource utilization
- Network latency and throughput
- Storage I/O performance
- Load balancer efficiency
4. Business Metrics:
- User experience indicators
- Feature usage patterns
- Performance impact on user behavior
- Revenue impact of performance issues
AI-Enhanced Features:
AI Driven Development #60day challenge
- Predictive performance analysis
- Automatic performance optimization suggestions
- Anomaly detection with machine learning
- Performance correlation analysis
- Optimization recommendation engine
Generate comprehensive monitoring system with dashboards, alerting, and optimization recommendations.
---------------
Create comprehensive load testing framework for validating system performance and scalability.
Load Testing Requirements:
- Simulate realistic user behavior patterns
- Test system under various load conditions
- Validate performance under failure scenarios
- Measure scalability characteristics
- Generate actionable performance reports
Testing Scenarios:
1. Baseline Performance Testing:
- Single user performance benchmarks
- API endpoint response time validation
- Database query performance testing
- WebSocket connection performance
2. Scalability Testing:
- Gradual load increase from 1 to 1000+ users
- Sudden load spikes simulation
- Sustained high load testing
- Resource utilization under load
3. Stress Testing:
- System behavior at breaking points
- Recovery after overload conditions
- Cascading failure prevention
- Resource exhaustion scenarios
4. Real-world Simulation:
- Collaborative editing with multiple users
- Document sharing and permission changes
AI Driven Development #60day challenge
- Mixed read/write operations
- Geographic distribution simulation
Technical Implementation:
- Locust or Artillery for load generation
- WebSocket load testing for real-time features
- Database stress testing tools
- Performance metrics collection during tests
- Automated performance regression detection
Generate comprehensive load testing suite with realistic scenarios and detailed reporting.
-----
can you list all urls and check its working and fix any issues exist.
